name: Create SPM Beta Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE'
      - '.gitignore'
      - 'app-repo.json'
      - 'Images/**'
      - '*.md'

jobs:
  build:
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - uses: actions/checkout@v3
        with:
            repository: ${{ secrets.B_BR }}
            path: "Bbuild"
            token: ${{ github.token }}  # Changed from secrets.Random to github.token

      - name: Install dependencies
        run: |
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64
          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid
          brew install 7zip gnu-sed

      - name: Set up Swift environment
        uses: fwal/setup-swift@v1
        with:
          swift-version: '5.9'

      - name: Prep
        run: | 
          mkdir -p upload
          sed -i '' '/func application(/a\
          Preferences.beta = true
          ' iOS/Delegates/AppDelegate.swift

      - name: Resolve Swift Dependencies
        run: |
          swift package resolve
          
      - name: Build with Swift Package Manager
        run: |
          # Use xcodebuild with the generated Package.swift
          xcodebuild -scheme Backdoor -sdk iphoneos -configuration Release \
            -derivedDataPath ./DerivedData \
            -destination 'generic/platform=iOS' \
            -workspace backdoor.xcworkspace \
            CODE_SIGN_IDENTITY="-" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=NO \
            BUILD_LIBRARIES_FOR_DISTRIBUTION=YES \
            SUPPORTS_MACCATALYST=NO
          
          # Sign the app with ldid
          cd ./DerivedData/Build/Products/Release-iphoneos
          ldid -S Backdoor.app
          
          # Package into IPA
          mkdir -p Payload
          cp -r Backdoor.app Payload/
          zip -r upload/backdoor.ipa Payload
          rm -rf Payload
          
          # Move the IPA to the upload directory
          cp upload/backdoor.ipa $GITHUB_WORKSPACE/upload/feather.ipa

      - name: Install pyupload
        run: |
          pip install pyupload

      - name: Upload file to Catbox
        id: upload_catbox
        run: |
          UPLOAD_OUTPUT=$(pyupload upload/feather.ipa --host=catbox)
          echo "Upload Output: $UPLOAD_OUTPUT"
          
          LINK=$(echo "$UPLOAD_OUTPUT" | sed -n 's/.*Your link : //p')
          echo "Uploaded file link: $LINK"
          
          echo "catbox_link=$LINK" >> $GITHUB_ENV

      - name: Update Bbuild
        run: |
          updated_at=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          size=$(stat -f%z upload/feather.ipa || echo 12375230)
          version=${{ github.run_number }}
          download_url=${{ env.catbox_link }}
      
          current_version=$(jq -r '.apps[0].version' $GITHUB_WORKSPACE/Bbuild/b.json)
          echo "Current highest version: $current_version"
      
          if [ -n "$download_url" ] && [ "$version" -gt "$current_version" ]; then
            echo "Download URL for .ipa file: $download_url"
            echo "Updated at: $updated_at"
            echo "Size: $size bytes"
            echo "Version: $version (higher than current $current_version)"
      
            jq --arg version "$version" \
               --arg date "$updated_at" \
               --argjson size "$size" \
               --arg url "$download_url" \
               '.apps[0].size = $size |
                .apps[0].version = $version |
                .apps[0].versionDate = $date |
                .apps[0].downloadURL = $url |
                .apps[0].versions = (
                  [{
                    version: $version,
                    date: $date,
                    size: $size,
                    downloadURL: $url
                  }] + .apps[0].versions
                ) | .apps[0].versions |= unique_by(.version)' $GITHUB_WORKSPACE/Bbuild/b.json > $GITHUB_WORKSPACE/Bbuild/updated_b.json
      
            mv $GITHUB_WORKSPACE/Bbuild/updated_b.json $GITHUB_WORKSPACE/Bbuild/b.json
          else
            echo "Version $version is not greater than the current version $current_version or missing information."
            echo "Updated at: $updated_at"
            echo "Version: $version"
          fi

      - name: Push builds
        run: |
            cd $GITHUB_WORKSPACE/Bbuild
            git config --local user.email "actions@github.com"
            git config --local user.name "GitHub Actions"
            git add .
            git commit -m "SPM Build $GITHUB_SHA" || exit 0
            git push